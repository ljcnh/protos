// base.proto - 包含所有RPC服务的通用基础定义
// 这个文件定义了可被各个服务复用的公共消息结构、枚举和类型
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

package base;
option go_package = "./base";

// 通用状态码枚举 - 定义了所有RPC服务可能返回的状态
// 这些状态码遵循HTTP状态码的设计理念，但针对RPC服务进行了优化
enum StatusCode {
  STATUS_CODE_UNSPECIFIED = 0;        // 未指定状态
  STATUS_CODE_SUCCESS = 1;            // 成功
  STATUS_CODE_FAILED = 2;             // 失败
  STATUS_CODE_PENDING = 3;            // 处理中
  STATUS_CODE_TIMEOUT = 4;            // 超时
  STATUS_CODE_VALIDATION_FAILED = 5;  // 验证失败 - 请求参数不符合要求
  STATUS_CODE_PERMISSION_DENIED = 6;  // 权限不足 - 用户没有足够权限执行操作
  STATUS_CODE_NOT_FOUND = 7;          // 资源不存在 - 请求的资源不存在
  STATUS_CODE_CONFLICT = 8;           // 冲突 - 请求与当前状态冲突
  STATUS_CODE_TOO_MANY_REQUESTS = 9;  // 请求过多 - 超过了频率限制
}

// 基础响应消息 - 所有RPC服务的响应都应包含这些字段
message BaseResponse {
  StatusCode status = 1;       // 状态码
  string message = 2;          // 消息描述
  int32 code = 3;              // 错误码
  google.protobuf.Any data = 4; // 附加数据，可用于传递任意类型的响应数据
}

// 分页请求 - 用于需要分页的查询接口
message PaginationRequest {
  int32 page = 1;              // 页码，从1开始
  int32 page_size = 2;         // 每页大小，默认为10
}

// 分页响应 - 包含分页查询的结果信息
message PaginationResponse {
  int32 total = 1;              // 总条数
  int32 page = 2;               // 当前页码
  int32 page_size = 3;          // 每页大小
  int32 total_pages = 4;        // 总页数
}

// 基础请求消息 - 所有RPC服务的请求都应包含这些字段
// 提供了请求的基本上下文信息
message BaseRequest {
  google.protobuf.Timestamp timestamp = 1; // 请求时间戳
  string request_id = 2;        // 请求唯一标识符，用于追踪请求
  map<string, string> metadata = 3; // 元数据，可用于传递额外的上下文信息
}

// 认证信息 - 包含用户认证相关的信息
// 用于服务间传递用户身份和权限信息
message AuthInfo {
  string token = 1;             // 认证令牌，用于验证用户身份
  string user_id = 2;           // 用户ID，唯一标识一个用户
  repeated string roles = 3;    // 角色列表，定义用户的权限范围
}

// 过滤条件 - 用于构建查询过滤条件
// 支持多种比较操作符，可用于精确查询和模糊查询
message FilterCondition {
  string field = 1;             // 字段名，要过滤的字段
  string operator = 2;          // 操作符: eq(等于), ne(不等于), gt(大于), ge(大于等于), lt(小于), le(小于等于), in(在范围内), like(模糊匹配)
  string value = 3;             // 值，过滤的目标值
}

// 排序条件 - 用于指定查询结果的排序方式
// 可指定多个排序字段，按顺序应用
message SortCondition {
  string field = 1;             // 字段名，要排序的字段
  bool desc = 2;                // 是否降序排序，true表示降序，false表示升序
}